<#
Powershell is generated by Dell Optimizer Configuration Tool V1.2

Tool designed by: Sven Riebe
Twitter: @SvenRiebe

Legal disclaimer:
THE INFORMATION IN THIS PUBLICATION IS PROVIDED 'AS-IS.' DELL MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND WITH RESPECT TO THE INFORMATION IN THIS PUBLICATION,
AND SPECIFICALLY DISCLAIMS IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
In no event shall Dell Technologies, its affiliates or suppliers, be liable for any damages whatsoever arising from or related to the information contained herein or
actions that you decide to take based thereon, including any direct, indirect, incidental, consequential, loss of business profits or special damages,
even if Dell Technologies, its affiliates or suppliers have been advised of the possibility of such damages.
#>

<#
.SYNOPSIS
Performs settings to Dell Optimizer Version 3.1.222.0

.DESCRIPTION
The script is settings all option in Dell Optimizer on each start

.PARAMETER InputPath
no parameters are availible

.PARAMETER OutputPath
no parameters are availible

.INPUTS
None. You cannot pipe objects to this Powershell script 'your saved name'.ps1.

.OUTPUTS
None. 'Your saved name'.ps1 does not generate any output.

#>

<#
Return Codes Dell Optimizer
0 Success
1 Failure
2 Reboot required
3 Failed to configure the read-only setting
4 Failed to configure licensed feature
5 Dell Optimizer service not installed
6 Dell Optimizer service is disabled
7 Dell Optimizer service is not running
8 Another instance of CLI is active
9 Another instance of user interface is active
10 It requires administrator privilege

MS Event Log IDs
10 Dell Optimizer is installed on machine
12 Dell Optimizer not found on machine
20 Setting change Error
21 Setting not changed because of it the same
22 Setting Changed
23 Setting is Read Only and can not change now
24 Setting is not availible on this device
30 Unlock change Error
31 Unlock not changed because of it the same
32 Unlock Changed to false
30 Lock change Error
31 Lock not changed because of it the same
32 Lock Changed to true
40 Set Application failure
41 Learned/Optimizer Apps on Device
42 Add App to learn success full

#>




##########################################################
####  Variables from Configurator                     ####
##########################################################
$Configuration = @(
    
    #### Optimizer Preferences
    [pscustomobject]@{SettingName='Telemetry.State'; SettingValue=$false; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Update.State'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Toast.GlobalNotification'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='DellOptimizerConfiguration.Suggestions'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='DellOptimizerConfiguration.StickyBanners'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='DellOptimizerConfiguration.BetaFeatures'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Privacy.EnablePrivacyNotifications'; SettingValue=$true; SettingIsLocked=$false}

    #### setting Analytics is for Precision only
    [pscustomobject]@{SettingName='Analytics.State'; SettingValue=$true;SettingIsLocked=$false}

    #### setting Applications
    [pscustomobject]@{SettingName='AppPerformance.State'; SettingValue=$true;SettingIsLocked="false"}
    [pscustomobject]@{SettingName='AppPerformance.PrioritizeForeground'; SettingValue=$false; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='AppPerformance.PDNotification'; SettingValue=$false; SettingIsLocked=$false}
     
    #### settings Audio
    [pscustomobject]@{SettingName='Audio.State'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.Audio3D'; SettingValue=$false;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.IsNXOSEnabled'; SettingValue=$false; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.JackNotification'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.AutoMute'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.Environment'; SettingValue='QuietRoom'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.RecordingNotificationPreference'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.RemoveMyBackgroundNoise'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Audio.RemoveOthersBackgroundNoise'; SettingValue=$true; SettingIsLocked=$false}

    #### setting Network
    [pscustomobject]@{SettingName='Network.State'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Network.AutoSwitch'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Network.SimultaneousDataTransfer'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Network.OptimizeTraffic'; SettingValue=$true; SettingIsLocked=$false}  ###Beta feature
    [pscustomobject]@{SettingName='Network.DynamicBandwidthDetection'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Network.ConferenceBandwidthPerformance'; SettingValue=$false;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Network.OutdatedRouterWiFi'; SettingValue=$false; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Network.TrafficPriority'; SettingValue='Conference'; SettingIsLocked=$false}

    #### setting Power
    [pscustomobject]@{SettingName='BatteryExtender.State'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='DynamicCharge.State'; SettingValue='True'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='SystemPowerConfiguration.SyncThermalModeAndWindowsPowerSlider'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='SystemPowerConfiguration.PeakShiftState'; SettingValue=$false;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='SystemPowerConfiguration.PeakShiftBatteryThreshold'; SettingValue='15'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='SystemPowerConfiguration.ThermalMode'; SettingValue='Quiet'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PeakShiftConfiguration'; SettingValue=''; SettingIsLocked=''}

    #### setting Presence Detection
    [pscustomobject]@{SettingName='PresenceDetection.State'; SettingValue=$true;SettingIsLocked=$false}    
    [pscustomobject]@{SettingName='PresenceDetection.WalkAwayLock'; SettingValue=$false; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.WalkAwayLockTimer'; SettingValue='60'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.WakeOnApproach'; SettingValue=$false;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.KeepAlive'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.EnableWithExternalMonitor'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.SnoozeTimer'; SettingValue='0'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.CameraBasedDetection'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.LookAwayDetect'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.OnlookerDetection'; SettingValue=$true; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.ODScreenEffect'; SettingValue='';SettingIsLocked=''}
    [pscustomobject]@{SettingName='PresenceDetection.ODSnoozeTimer'; SettingValue='60'; SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.ODNotification'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='PresenceDetection.ODPrompt'; SettingValue=$true;SettingIsLocked=$false}


    #### Collabration settings
    [pscustomobject]@{SettingName='Collaboration.State'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.Touchpad'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadChatEffect'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadMic'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadScreenshare'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadChat'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadCamera'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadDoubleTap'; SettingValue=$true;SettingIsLocked=$false}
    [pscustomobject]@{SettingName='Collaboration.TouchpadHWMuteNotification'; SettingValue=$true;SettingIsLocked=$false}


)

$Software = @(
    
    #### Optimizer Preferences
    [pscustomobject]@{ProfileName='Microsoft Teams'; ProcessName="Teams.exe"; Priority="1"}
    [pscustomobject]@{ProfileName='Google Chrome'; ProcessName="Chrome.exe"; Priority="2"}
    [pscustomobject]@{ProfileName=""; ProcessName=""; Priority="3"}
    [pscustomobject]@{ProfileName=""; ProcessName=""; Priority="4"}
    [pscustomobject]@{ProfileName=""; ProcessName=""; Priority="5"}
    

)



##########################################################
####  Variables for Environment                       ####
##########################################################
$OptimizerPath = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall | Get-ItemProperty | Where-Object {$_.DisplayName -match "Dell Optimizer" } | Select-Object -ExpandProperty InstallLocation
#### MS Event variables
$LoggingName = "Dell Optimizer"
$SourceName = "OptimizerConfig"

##########################################################
####  Function section                                ####
##########################################################

Function Optimizer-InstallCheck
    {

    #### Test if Dell Optimizer is installed on the machine
    $OptimizerFile = $OptimizerPath + "do-cli.exe"
    $OptimizerCheck = Test-Path -Path $OptimizerFile

    If ($OptimizerCheck -eq $true)
        {

        Write-EventLog -LogName $LoggingName -Source $SourceName -EntryType SuccessAudit -EventId 12 -Message "Success: Dell Optimizer is found on machine"

        }
    Else
        {

        Write-EventLog -LogName $LoggingName -Source $SourceName -EntryType Error -EventId 10 -Message "Error: Dell Optimizer not on machine. Script will end"

        Exit = 1

        }

    }

Function Optimizer-getsettings
    {

        param
            (
            
            )
        
        $SettingArray = @()
        $SettingArrayTemp = @()
        $Index = 0

        #### Get all settings for this device are possible
        cd $OptimizerPath
        $SettingArrayTemp = .\do-cli.exe /get

        #### Split Value in single lines for better selecting
        $SettingArrayTemp = ($SettingArrayTemp.split(":")).trim(" ")
        $SettingArrayCount = $SettingArrayTemp.Count -4 ### surpress the last 4 lines in the array foreach loop

        for ($i = 1; $i -le $SettingArrayCount)
            {
  
            #generate a new Temp object
            $ArrayTemp = New-Object PSObject
        
            # build a temporary array
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'Number' -Value $SettingArrayTemp[$index + 0] -Force
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'Name' -Value $SettingArrayTemp[$index + 3] -Force
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'Value' -Value $SettingArrayTemp[$index + 5] -Force
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'Description' -Value $SettingArrayTemp[$index + 7] -Force
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'SupportedValues' -Value $SettingArrayTemp[$index + 9] -Force
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'IsReadOnly' -Value $SettingArrayTemp[$index + 11] -Force
            $ArrayTemp | Add-Member -MemberType NoteProperty -Name 'IsLocked' -Value $SettingArrayTemp[$index + 13] -Force
    
            #Create the object
            [Array]$ArrayFinal += $ArrayTemp
    
            #step up counter and index
            $i = $i+15
            $index = $Index +15
                        
            }

    cd\
    
    return $ArrayFinal

    }

Function Optimizer-getApplications
    {

        param
            (
            
            )
        

        $ApplicationArrayTemp = @()


        #### Get all settings for this device are possible
        cd $OptimizerPath
        $ApplicationArrayTemp = .\do-cli.exe /AppPerformance -listLearningApps

        [array]$AppNameTemp = $ApplicationArrayTemp | Select-String "Name: "
        [array]$AppProcessTemp = $ApplicationArrayTemp | Select-String "ProcessName: "
        [array]$AppPriorityTemp = $ApplicationArrayTemp | Select-String "Priority: "
        [array]$AppIDTemp = $ApplicationArrayTemp | Select-String "ProfileGuid: "

        Function Applist-snipping
            {
                param
                    (
                
                    [string]$Searchstring,
                    [string]$VarName
                
                    )

                    [string]$AppString = "$VarName"
                    [string]$AppString = $AppString.TrimStart($Searchstring)

            Return $AppString

            }

        [string]$AppProcess1 = Applist-snipping -Searchstring "ProcessName: " -VarName $AppProcessTemp[0]
        [string]$AppProcess2 = Applist-snipping -Searchstring "ProcessName: " -VarName $AppProcessTemp[1]
        [string]$AppProcess3 = Applist-snipping -Searchstring "ProcessName: " -VarName $AppProcessTemp[2]
        [string]$AppProcess4 = Applist-snipping -Searchstring "ProcessName: " -VarName $AppProcessTemp[3]
        [string]$AppProcess5 = Applist-snipping -Searchstring "ProcessName: " -VarName $AppProcessTemp[4]

        [string]$AppName1 = Applist-snipping -Searchstring "Name: " -VarName $AppNameTemp[0]
        [string]$AppName2 = Applist-snipping -Searchstring "Name: " -VarName $AppNameTemp[2]
        [string]$AppName3 = Applist-snipping -Searchstring "Name: " -VarName $AppNameTemp[4]
        [string]$AppName4 = Applist-snipping -Searchstring "Name: " -VarName $AppNameTemp[6]
        [string]$AppName5 = Applist-snipping -Searchstring "Name: " -VarName $AppNameTemp[8]

        [string]$AppPriority1 = Applist-snipping -Searchstring "Priority: " -VarName $AppPriorityTemp[0]
        [string]$AppPriority2 = Applist-snipping -Searchstring "Priority: " -VarName $AppPriorityTemp[1]
        [string]$AppPriority3 = Applist-snipping -Searchstring "Priority: " -VarName $AppPriorityTemp[2]
        [string]$AppPriority4 = Applist-snipping -Searchstring "Priority: " -VarName $AppPriorityTemp[3]
        [string]$AppPriority5 = Applist-snipping -Searchstring "Priority: " -VarName $AppPriorityTemp[4]

        [string]$AppID1 = Applist-snipping -Searchstring "ProfileGuid: " -VarName $AppIDTemp[0]
        [string]$AppID2 = Applist-snipping -Searchstring "ProfileGuid: " -VarName $AppIDTemp[1]
        [string]$AppID3 = Applist-snipping -Searchstring "ProfileGuid: " -VarName $AppIDTemp[2]
        [string]$AppID4 = Applist-snipping -Searchstring "ProfileGuid: " -VarName $AppIDTemp[3]
        [string]$AppID5 = Applist-snipping -Searchstring "ProfileGuid: " -VarName $AppIDTemp[4]

       
        $ApplicationArrayFinal = @(

        [pscustomobject]@{ProfileName=$AppName1; ProfileID=$AppID1; ProcessName=$AppProcess1; Priority=$AppPriority1}
        [pscustomobject]@{ProfileName=$AppName2; ProfileID=$AppID2; ProcessName=$AppProcess2; Priority=$AppPriority2}
        [pscustomobject]@{ProfileName=$AppName3; ProfileID=$AppID3; ProcessName=$AppProcess3; Priority=$AppPriority3}
        [pscustomobject]@{ProfileName=$AppName4; ProfileID=$AppID4; ProcessName=$AppProcess4; Priority=$AppPriority4}
        [pscustomobject]@{ProfileName=$AppName5; ProfileID=$AppID5; ProcessName=$AppProcess5; Priority=$AppPriority5}
    
        )


        cd\
    
        return $ApplicationArrayFinal

    }

Function Optimizer-setSettings
    {
        
        param
            (
            
            [string]$Name,
            [string]$Value            
            )


        $SettingStatus = Optimizer-SettingStatus -Name $Name    

        If($Value -ne $SettingStatus)
            {
             
            cd $OptimizerPath
            $SettingResult = .\do-cli.exe /configure -name="$Name" -Value="$Value"
            cd\
            
            #### return results
            [string]$SettingReturnCode = $SettingResult | Select-String "Program exited with return code:"
            [string]$SettingReturnText = $SettingResult[0]+$SettingResult[1]

            $SettingResultReturnTemp = @(
            [pscustomobject]@{SettingName=$Name; Result=$SettingReturnText; ReturnCode=($SettingReturnCode.TrimStart("Program exited with return code: "))}
            )

            }
        Else
            {

            #### return results
            $SettingResultReturnTemp = @(
            [pscustomobject]@{SettingName=$Name; Result="NotChangeResult"; ReturnCode="21"}
            )

            }

    Return $SettingResultReturnTemp
                   
    }

Function Optimizer-setApplications
    {
        
        param
            (
            
            [string]$Profile,
            [string]$ProcessName,
            [string]$Priority
            
            )

        $AppPrepartionReturnTemp = Optimizer-SettingUnlock -Name AppPerformance.State
        
        $FeatureEnable = Optimizer-SettingCheck -Name AppPerformance.State

        cd $OptimizerPath 

        if($FeatureEnable -ne $true)
            {

            .\do-cli.exe /configure -name=AppPerformance.State -value=true 

            }
                                                  
        $AppResult = .\do-cli.exe /appperformance -startlearning -profilename="$Profile" -processname="$ProcessName" -priority="$Priority"

        #### return results
        [string]$AppReturnCode = $AppResult | Select-String "Program exited with return code:"
        
        If($AppResult[0] -eq $True)
            {

            [string]$AppReturnText = "SuccessResult"

            }
        Else
            {
            
            [string]$AppReturnText = $AppResult[0]+$AppResult[1]

            }



        $AppResultReturnTemp = @(
        [pscustomobject]@{ProfileName=$Profile; Process=$ProcessName; Result=$AppReturnText; ReturnCode=($AppReturnCode.TrimStart("Program exited with return code: "))}
        )

        cd\
        
        $LockStatusTarget = $Configuration | Where-Object SettingName -EQ "AppPerformance.State" | Select-Object -ExpandProperty SettingIsLocked

        if($LockStatusTarget -eq $true)
            {   

            Optimizer-Settinglock -Name AppPerformance.State -Lock $LockStatusTarget

            }
    
    Return $AppResultReturnTemp
           
    }

Function Optimizer-SettingCheck
    {

        param
            (

            [String]$Name

            
            )
        
        $NameCheck = $SettingArray | Where-Object Name -match $Name

        If($null -ne $NameCheck)
            {

            $ResultName = $true

            }
        Else
            {

            $ResultName = $false

            }

        Return $ResultName   

    }

Function Optimizer-AppCheck
    {

        param
            (

            [String]$Name

            
            )
        
        [string]$NameCheck = $SoftwareArray | Where-Object ProcessName -eq $Name

        If($null -ne $NameCheck)
            {

            $ResultName = $true

            }
        Else
            {

            $ResultName = $false

            }

        Return $ResultName   

    }

Function Optimizer-ReadOnlyCheck
    {

        param
            (

            [String]$Name

            
            )
        
        $ReadOnlyCheck = $SettingArray | Where-Object Name -eq $Name | Where-Object IsReadOnly -EQ $true | Select-Object -ExpandProperty IsReadOnly

        If($ReadOnlyCheck -eq $true)
            {

            Return $true

            }
        Else
            {

            Return $false

            }

    }

Function Optimizer-CheckApplicationProcess
    {
        param
            (

            [string]$NameProcess

            )

    cd $OptimizerPath

    $ErrorString = "False"

    $CheckAppLearning = .\do-cli.exe /AppPerformance -listLearningApps
    
    #### select Process
    $SearchString = "ProcessName: "+$NameProcess
    [String]$CheckApp = $CheckAppLearning | Select-String $SearchString
    
    If($null -ne $CheckApp)
        {
   
        Return $true


        }
    Else
        {

        Return $false

        }

    cd\

       
    }

Function Optimizer-SettingLock
    {
        param
            (

            [string]$Name,
            [string]$Lock


            )
        
        cd $OptimizerPath

        if($Lock -eq $true)
            {

            $LockResult = .\do-cli.exe /configure -name="$Name" -lock=true

            #### return results
            [string]$LockReturnCode = $LockResult | Select-String "Program exited with return code:"
            [string]$LockReturnText = $lockResult[0]+$lockResult[0]

            $LockResultReturnTemp = @(
            [pscustomobject]@{SettingName=$Name; Result=$LockReturnText; ReturnCode=($LockReturnCode.TrimStart("Program exited with return code: "))}
            )

            }
        Else
            {

            #### return results

            $LockResultReturnTemp = @(
            [pscustomobject]@{SettingName=$Name; Result="NoLockSet"; ReturnCode=31}
            )
            
            }


        cd\

        Return $LockResultReturnTemp

    }

Function Optimizer-SettingUnlock
    {
        param
            (

            [string]$Name
                        
            )


        cd $OptimizerPath

        $checkLockStatus = .\do-cli.exe /get -name="$name"
        [string]$LockStatus = $checkLockStatus | Select-String "IsLocked:"
        $LockStatus = $LockStatus.TrimStart('IsLocked: ')
        
        If($LockStatus -eq $true)
            {

            $LockResult = .\do-cli.exe /configure -name="$Name" -lock=false

            #### return results
            [string]$UnLockReturnCode = $UnLockResult | Select-String "Program exited with return code:"
            [string]$UnLockReturnText = $UnlockResult[0]+$UnlockResult[1]

            $UnLockResultReturnTemp = @(
            [pscustomobject]@{SettingName=$Name; Result=$UnLockReturnText; ReturnCode=($UnLockReturnCode.TrimStart("Program exited with return code: "))}
            )
          
            }
        Else
            {

            #### return results

            $UnLockResultReturnTemp = @(
            [pscustomobject]@{SettingName=$Name; Result="NoLockUnset"; ReturnCode=31}
            )

            }
        cd\

        Return $UnLockResultReturnTemp

    }

Function Optimizer-SettingStatus
    {
        param
            (
            
            [string]$Name
            
            )

        $SettingStatus = $SettingArray | Where-Object Name -EQ $Name | Select-Object -ExpandProperty Value

        Return $SettingStatus

    }


Function Optimizer-GenerateLogMessage
    {
        
        param
            (

            [string]$Code,
            [Array]$ResultVar
            
            )

            If($Code -eq 1)
                {

                [Array]$LogMessage = $ResultVar | Where-Object {($_.returncode -ge 1) -and ($_.Returncode -le 10)} | ConvertTo-Json

                }
            Else
                {

                [Array]$LogMessage = $ResultVar | Where-Object ReturnCode -eq $Code | ConvertTo-Json

                }

            If($Null -eq $LogMessage)
                {

                $LogMessage = $false

                }

    Return $LogMessage

    }



Function Optimizer-writelog
    {

        param
            (

            [string]$LogName,
            [string]$Source,
            [string]$EventId,
            [string]$EntryType,
            [string]$Message

            )

        Write-EventLog -LogName $LogName -Source $Source -EventId $EventId -EntryType $EntryType -Message $Message
        
    }



##########################################################
####  Program section                                 ####
##########################################################

# setup LogID and Source for logging in MS Event Viewer
New-EventLog -LogName "Dell Optimizer" -Source "OptimizerConfig" -ErrorAction Ignore

#### Clear Reporting Arrays
[Array]$ResultSettingFinal =""
[Array]$UnLockResultFinal =""
[Array]$LockResultFinal =""
[Array]$ResultSoftwareFinal =""
[Array]$ResultAppFinal=""

#### If Optimizer is not installed, the script will be terminated immediately
Optimizer-InstallCheck

#### Collect availible settings and status on a client
$SettingArray = Optimizer-getsettings

#### Configuration Dell Optimizer Settings

foreach ($ConfigItem in $Configuration)
    {

    $CheckSetting = Optimizer-SettingCheck -Name $ConfigItem.SettingName
    $CheckReadOnly = Optimizer-ReadOnlyCheck -Name $ConfigItem.SettingName
    
    If($CheckSetting -eq $true)
        {

        If($CheckReadOnly -ne $true)
            {

            $UnLockResultReturnTemp = Optimizer-SettingUnlock -Name $ConfigItem.SettingName
            $ResultSettingTemp = Optimizer-setSettings -Name $ConfigItem.SettingName -Value $ConfigItem.SettingValue
            $LockResultReturnTemp = Optimizer-SettingLock -Name $ConfigItem.SettingName -Lock $ConfigItem.SettingIsLocked
            

            }
        Else
            {
         
            $ResultSettingTemp = @(
            [pscustomobject]@{SettingName=$ConfigItem.SettingName; Result="NotChangeReadOnly"; ReturnCode="23"}
            )

            }

        }

    Else
        {

        $ResultSettingTemp = @(
            [pscustomobject]@{SettingName=$ConfigItem.SettingName; Result="NotChangeSettingNotAvailible"; ReturnCode="24"}
            )

        }
    
    [Array]$ResultSettingFinal += $ResultSettingTemp
    [Array]$LockResultFinal += $LockResultReturnTemp
    [Array]$UnLockResultFinal += $UnLockResultReturnTemp
   
    }


##########################################################
####  Application section                             ####
##########################################################

#### Collect availible learned Application a client
$SoftwareArray = Optimizer-getApplications


#### Configuration Dell Optimizer Application
foreach ($App in $Software)
    {

    [array]$ResultAppTemp = @()

    if("" -ne $App.ProcessName)
        {

        $AppCheck = Optimizer-AppCheck -Name $App.ProcessName

        If($AppCheck -ne $true)
            {
            
            $ResultAppTemp = Optimizer-setApplications -Profile $App.ProfileName -ProcessName $App.ProcessName -Priority $App.Priority

            
            }
        Else
            {

            $ResultAppTemp = @(
            [pscustomobject]@{ProfileName=$app.ProfileName; ProcessName=$App.ProcessName; Result="IsLearned"; ReturnCode="41"}
            )

            }

        }
    Else
        {

        Write-Host "no App for" $App.Priority "is defined"

        }
    
    [array]$ResultAppFinal += $ResultAppTemp

    }

##########################################################
####  Logging section                                 ####
##########################################################

$Log = @(
    
    #### Settings
    [pscustomobject]@{Status="Change"; ReportVar=$ResultSettingFinal; Code="0";EventID="22";EntryType="SuccessAudit"}
    [pscustomobject]@{Status="Error"; ReportVar=$ResultSettingFinal; Code="1";EventID="20";EntryType="Error"}
    [pscustomobject]@{Status="NoChange"; ReportVar=$ResultSettingFinal; Code="21";EventID="21";EntryType="Information"}
    [pscustomobject]@{Status="NoSupport"; ReportVar=$ResultSettingFinal; Code="23";EventID="23";EntryType="Information"}
    [pscustomobject]@{Status="ReadOnly"; ReportVar=$ResultSettingFinal; Code="24";EventID="24";EntryType="Information"}

    #### Setting Lock/Unlock
    [pscustomobject]@{Status="Change"; ReportVar=$LockResultFinal; Code="0";EventID="32";EntryType="SuccessAudit"}
    [pscustomobject]@{Status="Error"; ReportVar=$LockResultFinal; Code="1";EventID="30";EntryType="Error"}
    [pscustomobject]@{Status="NoChange"; ReportVar=$LockResultFinal; Code="31";EventID="31";EntryType="Information"}
    [pscustomobject]@{Status="Change"; ReportVar=$UnLockResultFinal; Code="0";EventID="32";EntryType="SuccessAudit"}
    [pscustomobject]@{Status="Error"; ReportVar=$UnLockResultFinal; Code="1";EventID="30";EntryType="Error"}
    [pscustomobject]@{Status="NoChange"; ReportVar=$UnLockResultFinal; Code="31";EventID="31";EntryType="Information"}

    #### Applications
    [pscustomobject]@{Status="Change"; ReportVar=$ResultAppFinal; Code="0";EventID="42";EntryType="SuccessAudit"}
    [pscustomobject]@{Status="Error"; ReportVar=$ResultAppFinal; Code="1";EventID="40";EntryType="Error"}
    [pscustomobject]@{Status="NoChange"; ReportVar=$ResultAppFinal; Code="41";EventID="41";EntryType="Information"}

)


foreach ($var in $log)
    {

    $Event = Optimizer-GenerateLogMessage -ResultVar $var.ReportVar -Code $var.code

    If($Event -ne $false)
        {

        Optimizer-writelog -LogName $LoggingName -Source $SourceName -EventId $var.EventID -EntryType $var.EntryType -Message "$Event"
        
        }

    }